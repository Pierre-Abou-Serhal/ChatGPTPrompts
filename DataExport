using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using ExcelDataReader;

namespace ExcelValidationUsingDataReader
{
    public enum EncodingEnum { UTF8 }
    public enum FileType { EXCEL }
    public enum ReadEndCondition { FILE_END }

    public class ValidateFileReq
    {
        public String CorrelationId { get; set; }
        public FileInfoConfig FileInfo { get; set; }
    }

    public class FileInfoConfig
    {
        public Boolean ValidateHeader { get; set; }
        public EncodingEnum Encoding { get; set; }
        public String Delimiter { get; set; }
        public String FileBinary { get; set; } // Hex string representation
        public FileType FileType { get; set; }
        public Int32 HeaderRowNumber { get; set; }
        public List<String> ValidateHeaderContainsFields { get; set; }
        public List<SkipRowString> SkipRowStrings { get; set; }
        public List<ColumnConfig> Columns { get; set; }
    }

    public class SkipRowString { }

    public class ColumnConfig
    {
        public Int32 ColumnNumber { get; set; }
        public Boolean FindFromHeader { get; set; }
        public String HeaderColumnName { get; set; }
        public Int32 StartRowNumber { get; set; } // Expected start row for data
        public ReadEndCondition ReadEndCondition { get; set; }
        public String ReadEndConditionValue { get; set; }
        public List<CustomDataValidation> CustomDataValidation { get; set; }
    }

    public class CustomDataValidation
    {
        public Int32 InjestFilePropertyId { get; set; }
    }

    public class ExcelValidator
    {
        public List<String> Validate(ValidateFileReq request)
        {
            List<String> errors = [];

            // Convert hex string to byte array
            Byte[] fileBytes = HexStringToByteArray(request.FileInfo.FileBinary);

            // ExcelDataReader requires the codepages provider registration for certain encodings.
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

            using MemoryStream stream = new (fileBytes);
            using IExcelDataReader? reader = ExcelReaderFactory.CreateReader(stream);
            // Convert the excel file to a DataSet
            DataSet? dataSet = reader.AsDataSet();
            if (dataSet.Tables.Count == 0)
            {
                errors.Add("No worksheet found in the Excel file.");
                return errors;
            }

            DataTable table = dataSet.Tables[0];

            // Validate header if required
            if (request.FileInfo.ValidateHeader)
            {
                Int32 headerRowIndex = request.FileInfo.HeaderRowNumber - 1; // Convert to 0-based index
                if (headerRowIndex < 0 || headerRowIndex >= table.Rows.Count)
                {
                    errors.Add("Configured header row number is out of range.");
                }
                else
                {
                    DataRow headerRow = table.Rows[headerRowIndex];
                    List<String> headersFound = [];
                    // Assuming headers are in consecutive columns starting from index 0
                    for (int col = 0; col < table.Columns.Count; col++)
                    {
                        Object cellValue = headerRow[col];
                        if (!String.IsNullOrWhiteSpace(cellValue.ToString()))
                        {
                            headersFound.Add(cellValue.ToString() ?? String.Empty);
                        }
                        else
                        {
                            // Stop reading headers once an empty cell is encountered.
                            break;
                        }
                    }
                    foreach (String requiredHeader in request.FileInfo.ValidateHeaderContainsFields)
                    {
                        if (!headersFound.Contains(requiredHeader))
                        {
                            errors.Add($"Header validation failed. Required header '{requiredHeader}' not found in row {request.FileInfo.HeaderRowNumber}.");
                        }
                    }
                }
            }

            // Validate each column's configuration regarding the starting row of data
            foreach (ColumnConfig colConfig in request.FileInfo.Columns)
            {
                Int32 expectedStartRow = colConfig.StartRowNumber;
                Int32 dataStartRowIndex = -1; // will be set when first non-empty cell is found

                Int32 columnIndex = colConfig.ColumnNumber - 1; // Default to configured column number (0-based)
                    
                // If configured to locate the column by header name, find its actual column index.
                if (colConfig.FindFromHeader)
                {
                    Int32 headerRowIndex = request.FileInfo.HeaderRowNumber - 1;
                    if (headerRowIndex < 0 || headerRowIndex >= table.Rows.Count)
                    {
                        errors.Add("Configured header row number is out of range when searching for header column.");
                        continue;
                    }
                    DataRow headerRow = table.Rows[headerRowIndex];
                    Boolean found = false;
                    for (Int32 col = 0; col < table.Columns.Count; col++)
                    {
                        Object cellValue = headerRow[col];
                        if (cellValue.ToString()?.Equals(colConfig.HeaderColumnName, StringComparison.OrdinalIgnoreCase) ?? false)
                        {
                            columnIndex = col;
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        errors.Add($"Column header '{colConfig.HeaderColumnName}' not found in header row {request.FileInfo.HeaderRowNumber}.");
                        continue;
                    }
                }

                // Look for the first non-empty cell in the column after the header row.
                // Data is expected to start after the header row.
                for (Int32 r = request.FileInfo.HeaderRowNumber; r < table.Rows.Count; r++)
                {
                    Object cellValue = table.Rows[r][columnIndex];
                    if (!String.IsNullOrWhiteSpace(cellValue.ToString()))
                    {
                        dataStartRowIndex = r;
                        break;
                    }
                }

                if (dataStartRowIndex == -1)
                {
                    errors.Add($"No data found in column '{colConfig.HeaderColumnName}' (Column {(columnIndex + 1)}).");
                }
                else
                {
                    // Convert the 0-based row index back to 1-based row number for comparison
                    Int32 detectedStartRow = dataStartRowIndex + 1;
                    if (detectedStartRow != expectedStartRow)
                    {
                        errors.Add($"Mismatch for column '{colConfig.HeaderColumnName}' (Column {(columnIndex + 1)}): Expected data to start at row {expectedStartRow}, but detected at row {detectedStartRow}.");
                    }
                }
            }

            return errors;
        }

        private Byte[] HexStringToByteArray(string hex)
        {
            Int32 numberChars = hex.Length;
            Byte[] bytes = new Byte[numberChars / 2];
            for (Int32 i = 0; i < numberChars; i += 2)
                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            return bytes;
        }
    }

    class Program
    {
        static void Main(String[] args)
        {
            const String filePath = "D:\\Test.xlsx";
            
            // Example configuration
            ValidateFileReq configuredFileConfig = new()
            {
                CorrelationId = "abc123",
                FileInfo = new FileInfoConfig
                {
                    ValidateHeader = false,
                    Encoding = EncodingEnum.UTF8,
                    Delimiter = "",
                    FileBinary = BitConverter.ToString(File.ReadAllBytes(filePath)).Replace("-", ""), // Replace with your hex string representation of the file
                    FileType = FileType.EXCEL,
                    HeaderRowNumber = 0,
                    ValidateHeaderContainsFields = [],
                    SkipRowStrings = [],
                    Columns =
                    [
                        new ColumnConfig
                        {
                            ColumnNumber = 1,
                            FindFromHeader = false,
                            HeaderColumnName = "",
                            StartRowNumber = 3, // Expected start row for data in this column
                            ReadEndCondition = ReadEndCondition.FILE_END,
                            ReadEndConditionValue = "",
                            CustomDataValidation = [new() { InjestFilePropertyId = 1 }]
                        },

                        new ColumnConfig
                        {
                            ColumnNumber = 2,
                            FindFromHeader = false,
                            HeaderColumnName = "",
                            StartRowNumber = 3, // Expected start row for data in this column
                            ReadEndCondition = ReadEndCondition.FILE_END,
                            ReadEndConditionValue = "",
                            CustomDataValidation = [new() { InjestFilePropertyId = 1 }]
                        }
                    ]
                }
            };

            ExcelValidator validator = new ExcelValidator();
            List<String> errors = validator.Validate(configuredFileConfig);

            if (errors.Count != 0)
            {
                Console.WriteLine("Validation errors found:");
                foreach (String error in errors)
                {
                    Console.WriteLine(error);
                }
            }
            else
            {
                Console.WriteLine("Excel file configuration matches the sent configuration.");
            }
        }
    }
}
