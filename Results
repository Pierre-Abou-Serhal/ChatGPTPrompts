Great news: you donâ€™t need any new gateway code. Your existing `PutOrderTransactionAsync` + generic `PUT /api/rest/version/{version}/merchant/{merchantId}/order/{orderId}/transaction/{transactionId}` route already works for `apiOperation: "AUTHENTICATE_PAYER"`.

Below is a drop-in **Program.cs** update that (a) ensures the generic PUT route exists and (b) enriches Swagger with a **second example** showing the `AUTHENTICATE_PAYER` payload you provided.

---

## Program.cs â€” ensure/augment the generic PUT route

> If you already have this route, just replace the `.WithOpenApi(...)` block with the version below to add the new example.

```csharp
using System.Text.Json;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
// ... your other usings

// ðŸ”¹ Generic PUT for any transactionId (works for INITIATE_AUTHENTICATION and AUTHENTICATE_PAYER)
app.MapPut("/api/rest/version/{version}/merchant/{merchantId}/order/{orderId}/transaction/{transactionId}",
    async (string version,
            string merchantId,
            string orderId,
            string transactionId,
            JsonDocument body,
            IGatewayClient client,
            CancellationToken ct) =>
    {
        try
        {
            var resultDoc = await client.PutOrderTransactionAsync(orderId, transactionId, body, version, merchantId, ct);
            return Results.Content(resultDoc.RootElement.GetRawText(), "application/json");
        }
        catch (HttpRequestException ex)
        {
            return Results.BadRequest($"Upstream call failed: {ex.Message}");
        }
    })
    .WithName("PutOrderTransaction")
    .WithOpenApi(op =>
    {
        op.Summary = "Proxy PUT to /order/{orderId}/transaction/{transactionId}";
        op.Description =
            "Passes the JSON body to the upstream Mastercard gateway using Basic Auth from configuration. " +
            "Supports operations like INITIATE_AUTHENTICATION and AUTHENTICATE_PAYER.";

        var media = new OpenApiMediaType();

        // Example 1: INITIATE_AUTHENTICATION (kept for reference)
        media.Examples = new Dictionary<string, OpenApiExample>
        {
            ["initiateAuthentication"] = new OpenApiExample
            {
                Summary = "INITIATE_AUTHENTICATION",
                Value = new OpenApiString("""
{
  "apiOperation": "INITIATE_AUTHENTICATION",
  "session": { "id": "SESSION0002129947563N13816378N8" }
}
""")
            },
            // ðŸ”¹ Example 2: AUTHENTICATE_PAYER (your new use case)
            ["authenticatePayer"] = new OpenApiExample
            {
                Summary = "AUTHENTICATE_PAYER",
                Value = new OpenApiString("""
{
  "session": { "id": "SESSION0002129947563N13816378N8" },
  "device": {
    "browser": "MOZILLA",
    "browserDetails": {
      "3DSecureChallengeWindowSize": "FULL_SCREEN",
      "acceptHeaders": "application/json",
      "colorDepth": 24,
      "javaEnabled": true,
      "language": "en-US",
      "screenHeight": 640,
      "screenWidth": 480,
      "timeZone": 273
    },
    "ipAddress": "127.0.0.1"
  },
  "apiOperation": "AUTHENTICATE_PAYER"
}
""")
            }
        };

        op.RequestBody = new OpenApiRequestBody
        {
            Required = true,
            Content = { ["application/json"] = media }
        };
        return op;
    });
```

---

## Try it (your API)

```bash
curl -X PUT \
  "http://localhost:5000/api/rest/version/100/merchant/002M7270/order/123123/transaction/1" \
  -H "Content-Type: application/json" \
  -d '{
    "session": { "id": "SESSION0002129947563N13816378N8" },
    "device": {
      "browser": "MOZILLA",
      "browserDetails": {
        "3DSecureChallengeWindowSize": "FULL_SCREEN",
        "acceptHeaders": "application/json",
        "colorDepth": 24,
        "javaEnabled": true,
        "language": "en-US",
        "screenHeight": 640,
        "screenWidth": 480,
        "timeZone": 273
      },
      "ipAddress": "127.0.0.1"
    },
    "apiOperation": "AUTHENTICATE_PAYER"
  }'
```

Youâ€™ll get the upstream JSON (including the `authentication.redirect.html` and encrypted data) returned as-is.

---

### Notes

* **No extra models needed**: keeping `JsonDocument` avoids having to model the full 3DS payloads.
* **Security**: Donâ€™t log request/response bodiesâ€”PAN/CVV and encrypted blobs can appear in upstream responses.
* **Validation (optional)**: You can enforce `version`/`merchantId` to match configured values before forwarding.
