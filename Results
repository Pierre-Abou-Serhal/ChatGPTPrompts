public GetEmailByInternetIdResponse GetEmailByInternetId(string internetId)
{
    _log.Verbose("Entering {M} with InternetId {Id}", nameof(GetEmailByInternetId), internetId);

    // build service once
    var service = new ExchangeService(ExchangeVersion.Exchange2016) {
        Url         = new Uri(_appSettings.EwsUrl),
        Credentials = new WebCredentials(_appSettings.MailBoxUsername, _appSettings.MailBoxPassword)
    };

    // prepare filter
    var decodedId = HttpUtility.UrlDecode(internetId);
    var filter    = new SearchFilter.IsEqualTo(
        EmailMessageSchema.InternetMessageId,
        $"<{decodedId}>"
    );

    // create one Task per mailbox
    var searchTasks = _appSettings.ImpersonatedUsers
        .Select(smtp => Task.Run(() => {
            service.ImpersonatedUserId = new ImpersonatedUserId(
                ConnectingIdType.SmtpAddress, smtp
            );
            _log.Debug("Impersonating {Smtp}", smtp);

            // deep search in one shot
            var view = new ItemView(1) {
                Traversal = ItemTraversal.Deep
            };
            var results = service.FindItems(WellKnownFolderName.MsgFolderRoot, filter, view);
            return (Smtp: smtp, Results: results);
        }))
        .ToList();

    // As soon as any mailbox returns a hit, take it
    while (searchTasks.Count > 0)
    {
        var finished = Task.WhenAny(searchTasks).Result;
        searchTasks.Remove(finished);

        var (smtp, results) = finished.Result;
        if (results.TotalCount > 0)
        {
            _log.Debug("Found in {Smtp}", smtp);
            var item = results.Items.First();
            return BindAndBuildResponse(service, item);   // your existing bind/attachment logic
        }
        else
        {
            _log.Debug("Not in {Smtp}, continuing", smtp);
        }
    }

    // none found
    _log.Warning("No email found for InternetMessageId <{Id}>", decodedId);
    return new GetEmailByInternetIdResponse();
}
