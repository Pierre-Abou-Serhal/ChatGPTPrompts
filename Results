builder.Services.AddReverseProxy()
    .LoadFromConfig(builder.Configuration.GetSection("ReverseProxy"))
    .ConfigureHttpClient((context, handler) =>
    {
        var clusterId = context.Cluster.ClusterId;

        if (clusterId == "mastercardCluster")
        {
            // Load your client certificate from file
            var certPath = builder.Configuration["Visa:ClientCertificate:Path"];
            var certPassword = builder.Configuration["Visa:ClientCertificate:Password"];

            var clientCert = new X509Certificate2(certPath, certPassword);

            var handlerWithClientCert = handler as HttpClientHandler;
            if (handlerWithClientCert != null)
            {
                handlerWithClientCert.ClientCertificates.Add(clientCert);
                handlerWithClientCert.ClientCertificateOptions = ClientCertificateOption.Manual;

                // OPTIONAL: trust Visa’s root or intermediate certificate
                // (Usually not needed in production if their cert is trusted)
                handlerWithClientCert.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            }
        }

        // If you’re using a corporate proxy
        var proxyAddress = builder.Configuration["WebProxyAddress"];
        if (!string.IsNullOrEmpty(proxyAddress))
        {
            handler.Proxy = new WebProxy(proxyAddress);
            handler.UseProxy = true;
        }
    });




"Visa": {
  "ClientCertificate": {
    "Path": "certs/client_cert.pfx",
    "Password": "your_cert_password"
  }
}