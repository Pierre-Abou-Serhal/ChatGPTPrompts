// Endpoint
app.MapPost("/api/session", async Task<Results<Ok<CreateSessionResponse>, BadRequest<string>>> (
        /// <summary>Creates a session via the upstream gateway.</summary>
        /// <param name="request">Payload with session.authenticationLimit.</param>
        /// <returns>The upstream CreateSession response.</returns>
        CreateSessionRequest request,
        IGatewayClient client,
        CancellationToken ct) =>
    {
        if (request?.Session is null || request.Session.AuthenticationLimit <= 0)
            return TypedResults.BadRequest("Invalid request: 'session.authenticationLimit' must be > 0.");

        try
        {
            var result = await client.CreateSessionAsync(request, ct);
            return TypedResults.Ok(result);
        }
        catch (HttpRequestException ex)
        {
            return TypedResults.BadRequest($"CreateSession failed: {ex.Message}");
        }
    })
    .WithName("CreateSession");               // ðŸ”¹ Improves Swagger operation naming

app.MapPut("/api/rest/version/{version}/merchant/{merchantId}/session/{session}",
        async (string version,
            string merchantId,
            string session,
            JsonDocument body,
            IGatewayClient client,
            CancellationToken ct) =>
        {
            // Optionally validate version/merchant vs config here if you want to restrict.
            try
            {
                var resultDoc = await client.PutToSessionAsync(session, body, version, merchantId, ct);

                // Return upstream JSON as-is
                return Results.Content(resultDoc.RootElement.GetRawText(), "application/json");
            }
            catch (HttpRequestException ex)
            {
                return Results.BadRequest($"Upstream call failed: {ex.Message}");
            }
        })
    .WithName("PutSessionAction");

app.MapPut("/api/rest/version/{version}/merchant/{merchantId}/order/{orderId}/transaction/{transactionId}",
        async (string version,
            string merchantId,
            string orderId,
            string transactionId,
            JsonDocument body,
            IGatewayClient client,
            CancellationToken ct) =>
        {
            try
            {
                var resultDoc =
                    await client.PutOrderTransactionAsync(orderId, transactionId, body, version, merchantId, ct);
                return Results.Content(resultDoc.RootElement.GetRawText(), "application/json");
            }
            catch (HttpRequestException ex)
            {
                return Results.BadRequest($"Upstream call failed: {ex.Message}");
            }
        })
    .WithName("InitiateAuthentication");
