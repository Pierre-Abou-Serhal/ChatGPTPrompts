// P2A RequestCashWithdrawal
        for (Int32 y = 0; y < 2; y++)
        {
            String correlationId = Guid.NewGuid().ToString();
            
            String P2ALBPAccountNbr = "011217457005422";
            String P2AUSDAccountNbr = "011217457006840";

            String P2ALBPCurrency = "LBP";
            String P2AUSDCurrency = "USD";

            String P2AAmountLBP1 = "400000"; // Saturday
            String P2AAmountLBP2 = "600000"; // Sunday
            
            String P2AAmountUSD1 = "20"; // Saturday
            String P2AAmountUSD2 = "30"; // Sunday

            String P2AReservedAmoutLBP1 = "ACLK25276FC8P6MT"; // Saturday
            String P2AReservedAmoutLBP2 = "ACLK252765LGL3CC"; // Sunday
            String P2AReservedAmoutUSD1 = "ACLK252765LGBMMH"; // Saturday
            String P2AReservedAmoutUSD2 = "ACLK25276MFJGVQ3"; // Sunday
            
            String P2AReferenceIdLBP1 = "2030248211"; // Saturday
            String P2AReferenceIdLBP2 = "1517292296"; // Sunday
            String P2AReferenceIdUSD1 = "1394273710"; // Saturday
            String P2AReferenceIdUSD2 = "2662076470"; // Sunday
            
            String P2AOTPLBP1 = "482182"; // Saturday
            String P2AOTPLBP2 = "883770"; // Sunday
            String P2AOTPUSD1 = "323779"; // Saturday
            String P2AOTPUSD2 = "776800"; // Sunday
            
            try
            {
                String payload = """
                                 {
                                     "CorrelationId": "{correlationId}",
                                     "TransactionType": "CASHW",
                                     "CustomerId": "1217457",
                                     "AccountNumber": "{accountNumber}",
                                     "AccountCurrency": "{accountCurrency}",
                                     "Amount": "{accountAmount}",
                                     "AmountCurrency": "{accountCurrency}",
                                     "Commission": "0.0",
                                     "CommissionCurrency": "{accountCurrency}",
                                     "SourceMobileNumber": "96179312020",
                                     "SourceFullName": "MAROUN BECHARA CHKAIBAN",
                                     "DestinationMobileNumber": "96179312020",
                                     "ReservedAmountId": "{reservedAmountId}",
                                     "ReferenceId": "{referenceId}",
                                     "OTP": "{otp}",
                                     "ExpiryDate": "2024-06-15T15:41:46.389299",
                                     "TerminalId": "SGBLSF17"
                                 }
                                 """;

                payload = payload.Replace("{correlationId}", correlationId.Replace("-", ""));

                // Saturday
                DateTime saturdayDate = new DateTime(2025, 10, 4);

                if (DateTime.Today == saturdayDate)
                {
                    if (y % 2 == 0) // LBP
                    {
                        payload = payload.Replace("{accountNumber}", P2ALBPAccountNbr);
                        payload = payload.Replace("{accountCurrency}", P2ALBPCurrency);
                        payload = payload.Replace("{accountAmount}", P2AAmountLBP1);
                        payload = payload.Replace("{reservedAmountId}", P2AReservedAmoutLBP1);
                        payload = payload.Replace("{referenceId}", P2AReferenceIdLBP1);
                        payload = payload.Replace("{otp}", P2AOTPLBP1);
                    }
                    else // USD
                    {
                        payload = payload.Replace("{accountNumber}", P2AUSDAccountNbr);
                        payload = payload.Replace("{accountCurrency}", P2AUSDCurrency);
                        payload = payload.Replace("{accountAmount}", P2AAmountUSD1);
                        payload = payload.Replace("{reservedAmountId}", P2AReservedAmoutUSD1);
                        payload = payload.Replace("{referenceId}", P2AReferenceIdUSD1);
                        payload = payload.Replace("{otp}", P2AOTPUSD1);
                    }
                }
                
                // Sunday
                DateTime sundayDate = new DateTime(2025, 10, 5);
                
                if (DateTime.Today == DateTime.Today)
                {
                    if (y % 2 == 0) // LBP
                    {
                        payload = payload.Replace("{accountNumber}", P2ALBPAccountNbr);
                        payload = payload.Replace("{accountCurrency}", P2ALBPCurrency);
                        payload = payload.Replace("{accountAmount}", P2AAmountLBP2);
                        payload = payload.Replace("{reservedAmountId}", P2AReservedAmoutLBP2);
                        payload = payload.Replace("{referenceId}", P2AReferenceIdLBP2);
                        payload = payload.Replace("{otp}", P2AOTPLBP2);
                    }
                    else // USD
                    {
                        payload = payload.Replace("{accountNumber}", P2AUSDAccountNbr);
                        payload = payload.Replace("{accountCurrency}", P2AUSDCurrency);
                        
                        payload = payload.Replace("{accountAmount}", P2AAmountUSD2);
                        payload = payload.Replace("{reservedAmountId}", P2AReservedAmoutUSD2);
                        payload = payload.Replace("{referenceId}", P2AReferenceIdUSD2);
                        payload = payload.Replace("{otp}", P2AOTPUSD2);
                    }
                }

                var x = payload;

                _ = await _bll.PostAsyncStringPayload<dynamic>(payload,
                    "http://10.0.40.140:7603/chn.app/P2A/RequestCashWithdrawal");
            }
            catch (Exception ex)
            {
                LogErrorJson(ex, new CorrelationInfo()
                {
                    CorrelationId = correlationId,
                    RDirection = RequestDirection.Response,
                    RequestURL = "SetExpiredPoints",
                    UserName = _globalSettings.AppUsername,
                    Reserved = ex.Message
                });

                _ = _bll.SendEmail(
                    userName: "AlternaSysUser",
                    correlationId: correlationId,
                    subject: "Alterna Loyalty Set Expired Points Job Error",
                    body: ex.ToString(),
                    isHtml: false,
                    from: _firstJob.EmailFrom,
                    to: _firstJob.ErrorUserEmailList,
                    attachments: []);
            }
        }
