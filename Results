public class CSVValidator
    {
        public List<string> Validate(ValidateFileReq req)
        {
            List<string> errors = new List<string>();

            // Convert hex string to byte array and then to CSV string (assuming UTF8)
            byte[] fileBytes = HexStringToByteArray(req.FileInfo.FileBinary);
            string csvContent = Encoding.UTF8.GetString(fileBytes);

            // Read CSV file using CsvHelper
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                Delimiter = req.FileInfo.Delimiter,
                // If ValidateHeader is true, assume the first row is the header
                HasHeaderRecord = req.FileInfo.ValidateHeader
            };

            // We'll read all rows into a list of string arrays.
            List<string[]> rows = new List<string[]>();
            using (var reader = new StringReader(csvContent))
            using (var csv = new CsvReader(reader, config))
            {
                while (csv.Read())
                {
                    // Get the row as an array of strings
                    var row = new List<string>();
                    for (int i = 0; csv.TryGetField<string>(i, out string field); i++)
                    {
                        row.Add(field);
                    }
                    rows.Add(row.ToArray());
                }
            }

            if (rows.Count == 0)
            {
                errors.Add("No data found in the CSV file.");
                return errors;
            }

            // Validate header if configured
            int headerRowIndex = -1;
            if (req.FileInfo.ValidateHeader)
            {
                // Convert the 1-based header row number to a 0-based index
                headerRowIndex = req.FileInfo.HeaderRowNumber - 1;
                if (headerRowIndex < 0 || headerRowIndex >= rows.Count)
                {
                    errors.Add("Configured header row number is out of range.");
                }
                else
                {
                    string[] headerRow = rows[headerRowIndex];
                    List<string> headersFound = headerRow.Where(h => !string.IsNullOrWhiteSpace(h)).Select(h => h.Trim()).ToList();
                    foreach (string requiredHeader in req.FileInfo.ValidateHeaderContainsFields)
                    {
                        if (!headersFound.Any(h => h.Equals(requiredHeader, StringComparison.OrdinalIgnoreCase)))
                        {
                            errors.Add($"Header validation failed. Required header '{requiredHeader}' not found in row {req.FileInfo.HeaderRowNumber}.");
                        }
                    }
                }
            }
            else
            {
                // If not configured to validate header, assume there is no header row.
                headerRowIndex = -1;
            }

            // For each column configuration, check that data starts on the expected row.
            // For CSV, data rows start right after the header row (if present), or from row 0 if no header.
            int dataStartIndex = req.FileInfo.ValidateHeader ? headerRowIndex + 1 : 0;
            foreach (var column in req.FileInfo.Columns)
            {
                int expectedStartRow = column.StartRowNumber;
                int dataDetectedRowIndex = -1;
                int columnIndex = column.ColumnNumber - 1; // default to configuration if not found by header

                // If the configuration uses header lookup, find the column index by header name.
                if (column.FindFromHeader && headerRowIndex >= 0)
                {
                    string[] headerRow = rows[headerRowIndex];
                    bool found = false;
                    for (int i = 0; i < headerRow.Length; i++)
                    {
                        if (!string.IsNullOrWhiteSpace(headerRow[i]) &&
                            headerRow[i].Trim().Equals(column.HeaderColumnName, StringComparison.OrdinalIgnoreCase))
                        {
                            columnIndex = i;
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        errors.Add($"Column header '{column.HeaderColumnName}' not found in header row {req.FileInfo.HeaderRowNumber}.");
                        continue;
                    }
                }

                // Find the first non-empty cell in the column from the data rows.
                for (int r = dataStartIndex; r < rows.Count; r++)
                {
                    string[] row = rows[r];
                    // If the row doesn't have enough columns, treat it as empty
                    if (columnIndex >= row.Length)
                        continue;

                    string cellValue = row[columnIndex];
                    if (!string.IsNullOrWhiteSpace(cellValue))
                    {
                        dataDetectedRowIndex = r;
                        break;
                    }
                }

                if (dataDetectedRowIndex == -1)
                {
                    errors.Add($"No data found in column '{column.HeaderColumnName}' (Column {column.ColumnNumber}).");
                }
                else
                {
                    // Convert the 0-based row index to a 1-based row number.
                    int detectedStartRow = dataDetectedRowIndex + 1;
                    if (detectedStartRow != expectedStartRow)
                    {
                        errors.Add($"Mismatch for column '{column.HeaderColumnName}' (Column {column.ColumnNumber}): Expected data to start at row {expectedStartRow}, but detected at row {detectedStartRow}.");
                    }
                }
            }

            return errors;
        }
