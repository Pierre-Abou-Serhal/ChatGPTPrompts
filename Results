Awesomeâ€”here are the **exact additions** you need to proxy the `PUT /api/rest/version/{version}/merchant/{merchantId}/order/{orderId}/transaction/{transactionId}` call with Basic Auth, passing the request body through and returning the upstream JSON as-is.

---

## 1) Extend the gateway client

### `Gateway/GatewayClient.cs` â€“ add a new method + interface signature

```csharp
// interface IGatewayClient
public interface IGatewayClient
{
    Task<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest request, CancellationToken ct = default);
    Task<JsonDocument> PostToSessionAsync(string sessionId, JsonDocument payload, string? versionOverride = null, string? merchantOverride = null, CancellationToken ct = default);

    // ðŸ”¹ NEW: PUT /order/{orderId}/transaction/{transactionId}
    Task<JsonDocument> PutOrderTransactionAsync(
        string orderId,
        string transactionId,
        JsonDocument payload,
        string? versionOverride = null,
        string? merchantOverride = null,
        CancellationToken ct = default);
}
```

```csharp
// class GatewayClient : IGatewayClient
public sealed class GatewayClient(IOptions<GatewayOptions> options, HttpClient http) : IGatewayClient
{
    // ...existing members...

    // ðŸ”¹ NEW
    public async Task<JsonDocument> PutOrderTransactionAsync(
        string orderId,
        string transactionId,
        JsonDocument payload,
        string? versionOverride = null,
        string? merchantOverride = null,
        CancellationToken ct = default)
    {
        var version = string.IsNullOrWhiteSpace(versionOverride) ? _cfg.Version : versionOverride!;
        var merchant = string.IsNullOrWhiteSpace(merchantOverride) ? _cfg.MerchantId : merchantOverride!;

        var url = $"https://{_cfg.Host}/api/rest/version/{version}/merchant/{merchant}/order/{orderId}/transaction/{transactionId}";
        ApplyBasicAuth();

        using var req = new HttpRequestMessage(HttpMethod.Put, url)
        {
            Content = new StringContent(payload.RootElement.GetRawText(), Encoding.UTF8, "application/json")
        };

        using var resp = await _http.SendAsync(req, ct);
        var body = await resp.Content.ReadAsStringAsync(ct);

        if (!resp.IsSuccessStatusCode)
            throw new HttpRequestException($"Upstream error {(int)resp.StatusCode}: {body}");

        return JsonDocument.Parse(body);
    }
}
```

---

## 2) Map the new endpoint

### `Program.cs` â€“ add this mapping (near your other routes)

```csharp
using System.Text.Json;
// ...other usings...

// ðŸ”¹ NEW: PUT /api/rest/version/{version}/merchant/{merchantId}/order/{orderId}/transaction/{transactionId}
app.MapPut("/api/rest/version/{version}/merchant/{merchantId}/order/{orderId}/transaction/{transactionId}",
    async (string version,
            string merchantId,
            string orderId,
            string transactionId,
            JsonDocument body,
            IGatewayClient client,
            CancellationToken ct) =>
    {
        try
        {
            var resultDoc = await client.PutOrderTransactionAsync(orderId, transactionId, body, version, merchantId, ct);
            return Results.Content(resultDoc.RootElement.GetRawText(), "application/json");
        }
        catch (HttpRequestException ex)
        {
            return Results.BadRequest($"Upstream call failed: {ex.Message}");
        }
    })
    .WithName("InitiateAuthentication")
    .WithOpenApi(op =>
    {
        op.Summary = "Initiate 3DS authentication for a transaction.";
        op.Description = "Proxies to the upstream PUT /order/{orderId}/transaction/{transactionId}. Uses configured Basic Auth.";
        op.RequestBody = new()
        {
            Required = true,
            Content =
            {
                ["application/json"] = new Microsoft.OpenApi.Models.OpenApiMediaType
                {
                    Example = new Microsoft.OpenApi.Any.OpenApiString("""
{
  "apiOperation": "INITIATE_AUTHENTICATION",
  "session": { "id": "SESSION0002129947563N13816378N8" }
}
""")
                }
            }
        };
        return op;
    });
```

---

## 3) Quick test (your API)

```bash
curl -X PUT \
  "http://localhost:5000/api/rest/version/100/merchant/002M7270/order/123123/transaction/1" \
  -H "Content-Type: application/json" \
  -d '{ "apiOperation":"INITIATE_AUTHENTICATION", "session": { "id": "SESSION0002129947563N13816378N8" } }'
```

Youâ€™ll get the upstream JSON (including the `authentication.redirect.html` snippet) streamed back unchanged.

---

### Notes

* **Security**: Youâ€™re relaying sensitive 3DS data; keep TLS on, avoid logging request/response bodies, and consider output filtering in production logs.
* **Validation**: If you want to restrict to your configured `Version`/`MerchantId`, compare route values to options and reject mismatches.
* **Swagger**: This route will appear automatically in your Swagger UI with the example payload.
