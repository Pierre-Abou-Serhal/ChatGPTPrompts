const crypto = require('crypto');

// You can define your constants similarly
const Constants = {
  SECRETKEY: 'YourSecretKeyHere', // Replace with your actual secret
  HASH256: 'SHA256'
};

/**
 * Generate a public key using username, correlationId, and secret key.
 * @param {string} username 
 * @param {string} correlationId 
 * @returns {string} Hashed public key
 */
function generatePublicKey(username, correlationId) {
  const keyStr = username + correlationId + Constants.SECRETKEY;
  const key = stringSha(keyStr, 'sha256');
  return key;
}

/**
 * Hash a string using the specified algorithm.
 * @param {string} password 
 * @param {string} hashAlgorithm 
 * @returns {string} Hash as hex string
 */
function stringSha(password, hashAlgorithm) {
  const algo = hashAlgorithm.toUpperCase();

  let hash;
  if (algo === Constants.HASH256) {
    hash = crypto.createHash('sha256').update(password, 'utf8').digest();
  } else {
    hash = crypto.createHash('sha512').update(password, 'utf8').digest();
  }

  return getStringFromHash(hash);
}

/**
 * Convert a Buffer to a hex string.
 * @param {Buffer} hash 
 * @returns {string} Hex string
 */
function getStringFromHash(hash) {
  return Array.from(hash)
    .map(byte => byte.toString(16).padStart(2, '0'))
    .join('');
}

// Example usage:
console.log(generatePublicKey('myUser', 'corrId123'));