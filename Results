USE [Alterna_DataExport]
GO
/****** Object:  UserDefinedTableType [dbo].[TVP_Properties]    Script Date: 2/13/2025 5:05:01 PM ******/
CREATE TYPE [dbo].[TVP_Properties] AS TABLE(
	[PropId] [int] NULL,
	[PropName] [nvarchar](max) NOT NULL,
	[PropValue] [nvarchar](max) NOT NULL,
	[PropIndex] [int] NULL,
	UNIQUE NONCLUSTERED 
(
	[PropId] ASC
)WITH (IGNORE_DUP_KEY = OFF)
)
GO
/****** Object:  UserDefinedFunction [dbo].[TrimSpaces]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[TrimSpaces] (@PROP NVARCHAR(MAX))
RETURNS NVARCHAR(MAX)
AS
BEGIN
    RETURN LTRIM(RTRIM(@PROP))
END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetPropertiesIndexes]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_GetPropertiesIndexes]
(
    @P__InputProperties TVP_Properties READONLY,
    @P__Section NVARCHAR(MAX)
)
RETURNS @OutputProperties TABLE
(
	propId INT,
    propName NVARCHAR(MAX),
    propValue NVARCHAR(MAX),
    propIndex NVARCHAR(MAX)
)
AS
BEGIN
    -- Insert the input table data into the output table with calculated propIndex
    INSERT INTO @OutputProperties (propId,propName, propValue, propIndex)
    SELECT 
		[PropId],
        propName, 
        propValue, 
        '{' + CAST([dbo].[udf_GetPropertyIndex](propName, @P__Section) AS NVARCHAR(MAX)) + '}' AS propIndex 
    FROM @P__InputProperties;

    RETURN;
END;

GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetPropertyIndex]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[udf_GetPropertyIndex]
(
	-- Add the parameters for the function here
	@PropName NVARCHAR(MAX),
	@Section NVARCHAR(MAX)
)
RETURNS INT
AS
BEGIN
	-- DECLARE THE INDEX TO BE RETURNED
	DECLARE @INDEX INT

	-- GET THE INDEX FROM THE TABLE USING IT'S PropName and Section
	SELECT @INDEX = [Index] 
	FROM [dbo].[t_ComplexFileTypeProperties] WHERE PropertyName = @PropName AND [Section] = @Section

	-- RETURN THE INDEX
	RETURN @INDEX

END

GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetTemplate]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_GetTemplate]
(
    @P__Section NVARCHAR(10),
    @P__FileId INT
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Template NVARCHAR(MAX);

    IF(@P__Section = 'Header')
    BEGIN 
        SELECT @Template = Header 
        FROM dbo.t_ComplexFileType  
        WHERE dbo.t_ComplexFileType.FileId = @P__FileId;
    END
    ELSE IF(@P__Section = 'Body')
    BEGIN 
        SELECT @Template = Body 
        FROM dbo.t_ComplexFileType  
        WHERE dbo.t_ComplexFileType.FileId = @P__FileId;
    END
    ELSE IF(@P__Section = 'Footer')
    BEGIN 
        SELECT @Template = Footer 
        FROM dbo.t_ComplexFileType  
        WHERE dbo.t_ComplexFileType.FileId = @P__FileId;
    END
	ELSE IF(@P__Section = 'FileName')
    BEGIN 
        SELECT @Template = [FileName] 
        FROM dbo.t_ComplexFileType  
        WHERE dbo.t_ComplexFileType.FileId = @P__FileId;
    END
    
    RETURN @Template;
END;

GO
/****** Object:  Table [dbo].[t_ComplexFileType]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_ComplexFileType](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[FileId] [bigint] NOT NULL,
	[FileName] [nvarchar](max) NULL,
	[Header] [nvarchar](max) NOT NULL,
	[Body] [nvarchar](max) NOT NULL,
	[IsRepeated] [bit] NOT NULL,
	[BodyRepeaterValue] [nvarchar](50) NOT NULL,
	[Footer] [nvarchar](max) NOT NULL,
	[CreatedDate] [datetime2](0) NOT NULL,
	[CreatedBy] [nvarchar](100) NOT NULL,
	[LastModifiedDate] [datetime2](0) NOT NULL,
	[LastModifiedBy] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_t_ComplexFileType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_ComplexFileTypeProperties]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_ComplexFileTypeProperties](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ComplexFileTypeId] [bigint] NOT NULL,
	[Section] [nvarchar](50) NULL,
	[PropertyName] [nvarchar](250) NULL,
	[Index] [int] NULL,
	[PropertyFunc] [nvarchar](max) NULL,
	[CreatedDate] [datetime2](0) NOT NULL,
	[CreatedBy] [nvarchar](250) NOT NULL,
	[LastModifiedDate] [datetime2](0) NOT NULL,
	[LastModifiedBy] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_t_ComplexFileTypeProperties] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_Config]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_Config](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ApplicationOwner] [nvarchar](50) NOT NULL,
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](250) NOT NULL,
	[Value] [nvarchar](max) NOT NULL,
	[CreatedDate] [datetime2](0) NOT NULL,
	[CreatedBy] [nvarchar](250) NOT NULL,
	[LastModifiedDate] [datetime2](0) NOT NULL,
	[LastModifiedBy] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_t_Config] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_ExportExcelConfiguration]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_ExportExcelConfiguration](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AppCode] [nvarchar](200) NOT NULL,
	[FeatureCode] [nvarchar](200) NOT NULL,
	[AppConn] [nvarchar](max) NOT NULL,
	[FunctionName] [nvarchar](max) NOT NULL,
	[ProcedureName] [nvarchar](max) NOT NULL,
	[IsTable] [bit] NOT NULL,
	[CreatedDate] [datetime2](0) NOT NULL,
	[CreatedBy] [nvarchar](250) NOT NULL,
	[LastModifiedDate] [datetime2](0) NOT NULL,
	[LastModifiedBy] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_t_ExportExcelConfiguration] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_File]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_File](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Code] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Name] [nvarchar](250) NOT NULL,
	[IsXml] [bit] NOT NULL,
	[XmlRootName] [nvarchar](max) NULL,
	[IsLocal] [bit] NOT NULL,
	[Directory] [nvarchar](max) NULL,
	[CreatedDate] [datetime2](0) NOT NULL,
	[CreatedBy] [nvarchar](100) NOT NULL,
	[LastModifiedDate] [datetime2](0) NOT NULL,
	[LastModifiedBy] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_t_File] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_ImportExcelConfiguration]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_ImportExcelConfiguration](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AppCode] [nvarchar](200) NOT NULL,
	[FeatureCode] [nvarchar](200) NOT NULL,
	[AppConn] [nvarchar](max) NOT NULL,
	[ProcedureName] [nvarchar](max) NOT NULL,
	[TvpName] [nvarchar](max) NOT NULL,
	[WorkSheetNumber] [int] NOT NULL,
	[StartRow] [int] NOT NULL,
	[CreatedDate] [datetime2](0) NOT NULL,
	[CreatedBy] [nvarchar](250) NOT NULL,
	[LastModifiedDate] [datetime2](0) NOT NULL,
	[LastModifiedBy] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_t_ImportExcelConfiguration] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_InjestFileProperties]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_InjestFileProperties](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ApplicationOwner] [nvarchar](50) NOT NULL,
	[ValidationWorkflowName] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](2000) NULL,
 CONSTRAINT [PK_t_InjestFileProperties] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_lnk_InjestFile_ValidationStep]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_lnk_InjestFile_ValidationStep](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InjestFileId] [int] NOT NULL,
	[ValidationStepId] [int] NOT NULL,
 CONSTRAINT [PK_t_lnk_InjestFile_ValidationStep] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_Procedure]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_Procedure](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NOT NULL,
	[Description] [nvarchar](max) NOT NULL,
	[IsTVP] [bit] NOT NULL,
	[InputName] [nvarchar](250) NULL,
	[TVPMap] [nvarchar](max) NULL,
 CONSTRAINT [PK_t_Procedure] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[t_ValidationSteps]    Script Date: 2/13/2025 5:05:01 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t_ValidationSteps](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureId] [int] NOT NULL,
	[ContinueIfFail] [bit] NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[ChunkSize] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_t_ValidationSteps] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET IDENTITY_INSERT [dbo].[t_ComplexFileType] ON 

INSERT [dbo].[t_ComplexFileType] ([Id], [FileId], [FileName], [Header], [Body], [IsRepeated], [BodyRepeaterValue], [Footer], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (1, 1, N'{0}_{1}', N'HEADER{0}*{1}*{2}*', N'BODY{0}**{1}', 1, N'', N'FOOTER-*{0}_{1}*{2}*{3}', CAST(N'2024-06-05T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-06-05T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
SET IDENTITY_INSERT [dbo].[t_ComplexFileType] OFF
SET IDENTITY_INSERT [dbo].[t_ComplexFileTypeProperties] ON 

INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (1, 1, N'Header', N'Header_First', 0, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (2, 1, N'Header', N'Header_Second', 1, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (3, 1, N'Header', N'Header_Third', 2, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (4, 1, N'Body', N'Body_First', 0, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (5, 1, N'Body', N'Body_Second', 1, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (6, 1, N'Footer', N'Footer_First', 0, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (7, 1, N'Footer', N'Footer_Second', 1, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (8, 1, N'Footer', N'Footer_Third', 2, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (9, 1, N'Footer', N'Footer_Fourth', 3, N'TrimSpaces', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-06T00:00:00.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (10, 1, N'FileName', N'OrganizationCode', 0, N'TrimSpaces', CAST(N'2024-06-10T09:49:55.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-06-10T09:49:55.0000000' AS DateTime2), N'AlternaSysUser')
INSERT [dbo].[t_ComplexFileTypeProperties] ([Id], [ComplexFileTypeId], [Section], [PropertyName], [Index], [PropertyFunc], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (11, 1, N'FileName', N'SalaryType', 1, N'TrimSpaces', CAST(N'2024-06-10T09:50:11.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-06-10T09:50:11.0000000' AS DateTime2), N'AlternaSysUser')
SET IDENTITY_INSERT [dbo].[t_ComplexFileTypeProperties] OFF
SET IDENTITY_INSERT [dbo].[t_Config] ON 

INSERT [dbo].[t_Config] ([Id], [ApplicationOwner], [Code], [Description], [Value], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (5, N'SalDom', N'MAX_INVALID_AMOUNT_VALUES', N'The maximum number of invalid amount values', N'2', CAST(N'2025-02-05T12:21:44.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2025-02-05T12:21:44.0000000' AS DateTime2), N'AlternaSysUser')
SET IDENTITY_INSERT [dbo].[t_Config] OFF
SET IDENTITY_INSERT [dbo].[t_ExportExcelConfiguration] ON 

INSERT [dbo].[t_ExportExcelConfiguration] ([Id], [AppCode], [FeatureCode], [AppConn], [FunctionName], [ProcedureName], [IsTable], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (1, N'TestDataExport', N'ExportUsers', N'Data Source=DEV-SQL2016\PERFAPP;Initial Catalog=TestDataExport;User ID=sasadmin;Password=sasadmin', N'udf_Get_Users', N'usp_Get_Excel_Data', 1, CAST(N'2024-08-20T12:21:15.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-08-20T12:21:15.0000000' AS DateTime2), N'AlternaSysUser')
SET IDENTITY_INSERT [dbo].[t_ExportExcelConfiguration] OFF
SET IDENTITY_INSERT [dbo].[t_File] ON 

INSERT [dbo].[t_File] ([Id], [Code], [Description], [Name], [IsXml], [XmlRootName], [IsLocal], [Directory], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (1, N'SalDom', N'Salary Domiciliation', N'Salary Domiciliation', 0, N'', 0, N'SalDom', CAST(N'2024-05-27T14:51:28.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-05-27T14:51:28.0000000' AS DateTime2), N'AlternaSysUser')
SET IDENTITY_INSERT [dbo].[t_File] OFF
SET IDENTITY_INSERT [dbo].[t_ImportExcelConfiguration] ON 

INSERT [dbo].[t_ImportExcelConfiguration] ([Id], [AppCode], [FeatureCode], [AppConn], [ProcedureName], [TvpName], [WorkSheetNumber], [StartRow], [CreatedDate], [CreatedBy], [LastModifiedDate], [LastModifiedBy]) VALUES (1, N'TestDataExport', N'ImportUsers', N'Data Source=DEV-SQL2016\PERFAPP;Initial Catalog=TestDataExport;User ID=sasadmin;Password=sasadmin', N'usp_SynchronizeUsers', N'P__Users', 1, 2, CAST(N'2024-08-23T12:20:13.0000000' AS DateTime2), N'AlternaSysUser', CAST(N'2024-08-23T12:20:13.0000000' AS DateTime2), N'AlternaSysUser')
SET IDENTITY_INSERT [dbo].[t_ImportExcelConfiguration] OFF
SET IDENTITY_INSERT [dbo].[t_InjestFileProperties] ON 

INSERT [dbo].[t_InjestFileProperties] ([Id], [ApplicationOwner], [ValidationWorkflowName], [Description]) VALUES (1, N'SalDom', N'Validate Army Salary Amounts', N'Validate Army Salary Amounts')
INSERT [dbo].[t_InjestFileProperties] ([Id], [ApplicationOwner], [ValidationWorkflowName], [Description]) VALUES (2, N'SalDom', N'Validate Army Salary Accounts', N'Validate Army Salary Accounts')
SET IDENTITY_INSERT [dbo].[t_InjestFileProperties] OFF
SET IDENTITY_INSERT [dbo].[t_lnk_InjestFile_ValidationStep] ON 

INSERT [dbo].[t_lnk_InjestFile_ValidationStep] ([Id], [InjestFileId], [ValidationStepId]) VALUES (1, 1, 1)
INSERT [dbo].[t_lnk_InjestFile_ValidationStep] ([Id], [InjestFileId], [ValidationStepId]) VALUES (2, 2, 2)
INSERT [dbo].[t_lnk_InjestFile_ValidationStep] ([Id], [InjestFileId], [ValidationStepId]) VALUES (3, 1, 3)
SET IDENTITY_INSERT [dbo].[t_lnk_InjestFile_ValidationStep] OFF
SET IDENTITY_INSERT [dbo].[t_Procedure] ON 

INSERT [dbo].[t_Procedure] ([Id], [Name], [Description], [IsTVP], [InputName], [TVPMap]) VALUES (1, N'usp_ValidatePositiveNumbers', N'validate if passed comma separated strings are valid numbers', 0, N'Numbers', NULL)
INSERT [dbo].[t_Procedure] ([Id], [Name], [Description], [IsTVP], [InputName], [TVPMap]) VALUES (2, N'usp_ValidateAccountNumbers', N'validate if passed comma separated strings are valid account numbers (IBAN, ICBS, T24, ...)', 0, N'AccountNumbers', NULL)
INSERT [dbo].[t_Procedure] ([Id], [Name], [Description], [IsTVP], [InputName], [TVPMap]) VALUES (3, N'usp_ValidateLbpSaldomAmounts', N'validate if passed comma separated strings are valid LBP amounts (number of amounts having decimal places does not exceed config: MAX_INVALID_AMOUNT_VALUES)', 0, N'Numbers', NULL)
INSERT [dbo].[t_Procedure] ([Id], [Name], [Description], [IsTVP], [InputName], [TVPMap]) VALUES (4, N'usp_ValidateUsdSaldomAmounts', N'validate if passed comma separated strings are valid USD amounts (number of amounts having more then two decimal places does not exceed config: MAX_INVALID_AMOUNT_VALUES)', 0, N'Numbers', NULL)
SET IDENTITY_INSERT [dbo].[t_Procedure] OFF
SET IDENTITY_INSERT [dbo].[t_ValidationSteps] ON 

INSERT [dbo].[t_ValidationSteps] ([Id], [ProcedureId], [ContinueIfFail], [Name], [ChunkSize], [IsActive]) VALUES (1, 1, 0, N'Validate positive Salary Amounts', 0, 1)
INSERT [dbo].[t_ValidationSteps] ([Id], [ProcedureId], [ContinueIfFail], [Name], [ChunkSize], [IsActive]) VALUES (2, 2, 0, N'Validate Salary Accounts', 0, 1)
INSERT [dbo].[t_ValidationSteps] ([Id], [ProcedureId], [ContinueIfFail], [Name], [ChunkSize], [IsActive]) VALUES (3, 3, 0, N'Validate SalDom LBP Salary Amounts', 0, 1)
INSERT [dbo].[t_ValidationSteps] ([Id], [ProcedureId], [ContinueIfFail], [Name], [ChunkSize], [IsActive]) VALUES (4, 4, 0, N'Validate SalDom USD Salary Amounts', 0, 1)
SET IDENTITY_INSERT [dbo].[t_ValidationSteps] OFF
SET ANSI_PADDING ON

GO
/****** Object:  Index [UNIQUE_ComplexFileTypeId_Section_PropName]    Script Date: 2/13/2025 5:05:02 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [UNIQUE_ComplexFileTypeId_Section_PropName] ON [dbo].[t_ComplexFileTypeProperties]
(
	[ComplexFileTypeId] ASC,
	[Section] ASC,
	[PropertyName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_t_ExportExcelConfiguration_AppCode_FeatureCode]    Script Date: 2/13/2025 5:05:02 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_t_ExportExcelConfiguration_AppCode_FeatureCode] ON [dbo].[t_ExportExcelConfiguration]
(
	[AppCode] ASC,
	[FeatureCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_t_File]    Script Date: 2/13/2025 5:05:02 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_t_File] ON [dbo].[t_File]
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_t_ImportExcelConfiguration_AppCode_FeatureCode]    Script Date: 2/13/2025 5:05:02 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_t_ImportExcelConfiguration_AppCode_FeatureCode] ON [dbo].[t_ImportExcelConfiguration]
(
	[AppCode] ASC,
	[FeatureCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_Header]  DEFAULT ('') FOR [Header]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_Body]  DEFAULT ('') FOR [Body]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_IsRepeated]  DEFAULT ((0)) FOR [IsRepeated]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_BodyRepeaterValue]  DEFAULT ('') FOR [BodyRepeaterValue]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_Footer]  DEFAULT ('') FOR [Footer]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_CreatedBy]  DEFAULT (N'AlternaSysUser') FOR [CreatedBy]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_LastModifiedDate]  DEFAULT (getdate()) FOR [LastModifiedDate]
GO
ALTER TABLE [dbo].[t_ComplexFileType] ADD  CONSTRAINT [DF_t_ComplexFileType_LastModifiedBy]  DEFAULT (N'AlternaSysUser') FOR [LastModifiedBy]
GO
ALTER TABLE [dbo].[t_ComplexFileTypeProperties] ADD  CONSTRAINT [DF_t_ComplexFileTypeProperties_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[t_ComplexFileTypeProperties] ADD  CONSTRAINT [DF_t_ComplexFileTypeProperties_CreatedBy]  DEFAULT (N'AlternaSysUser') FOR [CreatedBy]
GO
ALTER TABLE [dbo].[t_ComplexFileTypeProperties] ADD  CONSTRAINT [DF_t_ComplexFileTypeProperties_LastModifiedDate]  DEFAULT (getdate()) FOR [LastModifiedDate]
GO
ALTER TABLE [dbo].[t_ComplexFileTypeProperties] ADD  CONSTRAINT [DF_t_ComplexFileTypeProperties_LastModifiedBy]  DEFAULT (N'AlternaSysUser') FOR [LastModifiedBy]
GO
ALTER TABLE [dbo].[t_Config] ADD  CONSTRAINT [DEFAULT_t_Config_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[t_Config] ADD  CONSTRAINT [DEFAULT_t_Config_CreatedBy]  DEFAULT ('AlternaSysUser') FOR [CreatedBy]
GO
ALTER TABLE [dbo].[t_Config] ADD  CONSTRAINT [DEFAULT_t_Config_LastModifiedDate]  DEFAULT (getdate()) FOR [LastModifiedDate]
GO
ALTER TABLE [dbo].[t_Config] ADD  CONSTRAINT [DEFAULT_t_Config_LastModifiedBy]  DEFAULT ('AlternaSysUser') FOR [LastModifiedBy]
GO
ALTER TABLE [dbo].[t_ExportExcelConfiguration] ADD  CONSTRAINT [DF_t_ExportExcelConfiguration_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[t_ExportExcelConfiguration] ADD  CONSTRAINT [DF_t_ExportExcelConfiguration_CreatedBy]  DEFAULT ('AlternaSysUser') FOR [CreatedBy]
GO
ALTER TABLE [dbo].[t_ExportExcelConfiguration] ADD  CONSTRAINT [DF_t_ExportExcelConfiguration_LastModifiedDate]  DEFAULT (getdate()) FOR [LastModifiedDate]
GO
ALTER TABLE [dbo].[t_ExportExcelConfiguration] ADD  CONSTRAINT [DF_t_ExportExcelConfiguration_LastModifiedBy]  DEFAULT ('AlternaSysUser') FOR [LastModifiedBy]
GO
ALTER TABLE [dbo].[t_File] ADD  CONSTRAINT [DF_t_File_IsXml]  DEFAULT ((0)) FOR [IsXml]
GO
ALTER TABLE [dbo].[t_File] ADD  CONSTRAINT [DF_t_File_XmlRootName]  DEFAULT ('') FOR [XmlRootName]
GO
ALTER TABLE [dbo].[t_File] ADD  CONSTRAINT [DF_t_File_IsLocal]  DEFAULT ((1)) FOR [IsLocal]
GO
ALTER TABLE [dbo].[t_File] ADD  CONSTRAINT [DF_t_File_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[t_File] ADD  CONSTRAINT [DF_t_File_CreatedBy]  DEFAULT (N'AlternaSysUser') FOR [CreatedBy]
GO
ALTER TABLE [dbo].[t_File] ADD  CONSTRAINT [DF_t_File_LastModifiedDate]  DEFAULT (getdate()) FOR [LastModifiedDate]
GO
ALTER TABLE [dbo].[t_File] ADD  CONSTRAINT [DF_t_File_LastModifiedBy]  DEFAULT (N'AlternaSysUser') FOR [LastModifiedBy]
GO
ALTER TABLE [dbo].[t_ImportExcelConfiguration] ADD  CONSTRAINT [DF_t_ImportExcelConfiguration_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[t_ImportExcelConfiguration] ADD  CONSTRAINT [DF_t_ImportExcelConfiguration_CreatedBy]  DEFAULT (N'AlternaSysUser') FOR [CreatedBy]
GO
ALTER TABLE [dbo].[t_ImportExcelConfiguration] ADD  CONSTRAINT [DF_t_ImportExcelConfiguration_LastModifiedDate]  DEFAULT (getdate()) FOR [LastModifiedDate]
GO
ALTER TABLE [dbo].[t_ImportExcelConfiguration] ADD  CONSTRAINT [DF_t_ImportExcelConfiguration_LastModifiedBy]  DEFAULT (N'AlternaSysUser') FOR [LastModifiedBy]
GO
ALTER TABLE [dbo].[t_Procedure] ADD  CONSTRAINT [DEFAULT_t_Procedure_IsTVP]  DEFAULT ((0)) FOR [IsTVP]
GO
ALTER TABLE [dbo].[t_ValidationSteps] ADD  CONSTRAINT [DEFAULT_t_ValidationSteps_ContiniuIfFail]  DEFAULT ((0)) FOR [ContinueIfFail]
GO
ALTER TABLE [dbo].[t_ValidationSteps] ADD  CONSTRAINT [DEFAULT_t_ValidationSteps_ChunckSize]  DEFAULT ((5000)) FOR [ChunkSize]
GO
ALTER TABLE [dbo].[t_ValidationSteps] ADD  CONSTRAINT [DEFAULT_t_ValidationSteps_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[t_ComplexFileType]  WITH CHECK ADD  CONSTRAINT [FK_t_ComplexFileType_t_File] FOREIGN KEY([FileId])
REFERENCES [dbo].[t_File] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[t_ComplexFileType] CHECK CONSTRAINT [FK_t_ComplexFileType_t_File]
GO
ALTER TABLE [dbo].[t_ComplexFileTypeProperties]  WITH CHECK ADD  CONSTRAINT [FK_t_ComplexFileTypeProperties_t_ComplexFileType] FOREIGN KEY([ComplexFileTypeId])
REFERENCES [dbo].[t_ComplexFileType] ([Id])
GO
ALTER TABLE [dbo].[t_ComplexFileTypeProperties] CHECK CONSTRAINT [FK_t_ComplexFileTypeProperties_t_ComplexFileType]
GO
ALTER TABLE [dbo].[t_lnk_InjestFile_ValidationStep]  WITH CHECK ADD  CONSTRAINT [FK_t_lnk_InjestFile_ValidationStep_t_InjestFileProperties] FOREIGN KEY([InjestFileId])
REFERENCES [dbo].[t_InjestFileProperties] ([Id])
GO
ALTER TABLE [dbo].[t_lnk_InjestFile_ValidationStep] CHECK CONSTRAINT [FK_t_lnk_InjestFile_ValidationStep_t_InjestFileProperties]
GO
ALTER TABLE [dbo].[t_lnk_InjestFile_ValidationStep]  WITH CHECK ADD  CONSTRAINT [FK_t_lnk_InjestFile_ValidationStep_t_ValidationSteps_1] FOREIGN KEY([ValidationStepId])
REFERENCES [dbo].[t_ValidationSteps] ([Id])
GO
ALTER TABLE [dbo].[t_lnk_InjestFile_ValidationStep] CHECK CONSTRAINT [FK_t_lnk_InjestFile_ValidationStep_t_ValidationSteps_1]
GO
ALTER TABLE [dbo].[t_ValidationSteps]  WITH CHECK ADD  CONSTRAINT [FK_t_ValidationSteps_t_Procedure] FOREIGN KEY([ProcedureId])
REFERENCES [dbo].[t_Procedure] ([Id])
GO
ALTER TABLE [dbo].[t_ValidationSteps] CHECK CONSTRAINT [FK_t_ValidationSteps_t_Procedure]
GO
/****** Object:  StoredProcedure [dbo].[usp_Get_Complex_File_Type_By_File_Id]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Get_Complex_File_Type_By_File_Id]
	-- Add the parameters for the stored procedure here
  @P__FileId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
	[Id],
	[FileId],
	[Header],
	[Body],
	[IsRepeated],
	[BodyRepeaterValue],
	[Footer]

	FROM [dbo].[t_ComplexFileType] WHERE FileId = @P__FileId
END

GO
/****** Object:  StoredProcedure [dbo].[usp_Get_Export_Excel_Configuration]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Get_Export_Excel_Configuration] 
	-- Add the parameters for the stored procedure here
	@P__AppCode NVARCHAR(250),
	@P__FeatureCode NVARCHAR(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
	[Id],
	[AppCode],
	[FeatureCode],
	[AppConn],
	[FunctionName],
	[ProcedureName],
	[IsTable]
	FROM [dbo].[t_ExportExcelConfiguration] WHERE [AppCode] = @P__AppCode AND [FeatureCode] = @P__FeatureCode

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Get_Import_Excel_Configuration]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Get_Import_Excel_Configuration] 
	-- Add the parameters for the stored procedure here
@P__AppCode NVARCHAR(200),
@P__FeatureCode NVARCHAR(200)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
	[Id],
	[AppCode],
	[FeatureCode],
	[AppConn],
	[ProcedureName],
	[TvpName],
	[WorkSheetNumber],
	[StartRow]

	FROM [dbo].[t_ImportExcelConfiguration] WHERE AppCode = @P__AppCode AND FeatureCode = @P__FeatureCode
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetFile_By_Code]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetFile_By_Code] 
	-- Add the parameters for the stored procedure here
	@P__Code NVARCHAR(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
		[Id],
		[Code],
		[Description],
		[Name],
		[IsXml],
		[XmlRootName],
		[IsLocal],
		[Directory]

	FROM [dbo].[t_File] WHERE [Code] = @P__Code;
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetFileTypeSections]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetFileTypeSections] 
	-- Add the parameters for the stored procedure here
  @P__FileId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT Section FROM t_ComplexFileTypeProperties WHERE ComplexFileTypeId = @P__FileId
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetFileValidationSteps]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pierre Abou Serhal
-- Create date: 2024-12-24
-- Description:	Get the validation steps that will be used to validate file data
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetFileValidationSteps]
( -- Params
	@InjestFilePropertyId INT
)
AS
BEGIN
	SET NOCOUNT ON;
	
	-- Retrieve the validation steps along with procedures for the given InjestFilePropertyId
    SELECT 
        ifp.Id AS InjestFilePropertyId,
        ifp.ApplicationOwner,
        ifp.ValidationWorkflowName,
        ifp.Description AS InjestFileDescription,
        vs.Id AS ValidationStepId,
        vs.Name AS ValidationStepName,
        vs.ContinueIfFail,
        vs.ChunkSize,
        p.Id AS ProcedureId,
        p.Name AS ProcedureName,
        p.Description AS ProcedureDescription,
        p.IsTVP,
        p.InputName,
        p.TVPMap
    FROM 
        t_InjestFileProperties ifp
    JOIN 
        t_lnk_InjestFile_ValidationStep lnk
        ON lnk.InjestFileId = ifp.Id
    JOIN 
        t_ValidationSteps vs
        ON vs.Id = lnk.ValidationStepId
    JOIN 
        t_Procedure p
        ON p.Id = vs.ProcedureId
    WHERE 
        ifp.Id = @InjestFilePropertyId
		AND vs.IsActive = 1
    ORDER BY 
        vs.Id;

END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetInjestFilePropertyDetailsByApplicationOwner]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pierre Abou Serhal
-- Create date: 2025-01-27
-- Description:	Get the Injest File Property Details By Application Owner
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetInjestFilePropertyDetailsByApplicationOwner]
( -- Params
	@ApplicationOwner NVARCHAR(MAX)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT * 
    FROM t_InjestFileProperties 
    WHERE ApplicationOwner = @ApplicationOwner
    ORDER BY ValidationWorkflowName ASC

END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetTemplateResultBySectionName]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetTemplateResultBySectionName] 
    @P__Properties TVP_Properties READONLY,
	@P__Section NVARCHAR(MAX),
	@P__FileId INT,
	@P__NumberOfProperties INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Properties TABLE (
		PropId INT,
        PropName NVARCHAR(MAX),
        PropValue NVARCHAR(MAX),
		PropIndex NVARCHAR(MAX)
    );

	--Get Properties Indexes
	INSERT INTO @Properties (PropId, PropName, PropValue, PropIndex)
	SELECT PropId, PropName, PropValue, PropIndex
	FROM [dbo].[udf_GetPropertiesIndexes](@P__Properties, @P__Section);

	-- Declare the cursor
    DECLARE @Cursor AS CURSOR;
	DECLARE @PropId INT;
    DECLARE @PropName NVARCHAR(MAX);
    DECLARE @PropValue NVARCHAR(MAX);
	DECLARE @PropIndex NVARCHAR(MAX);

	DECLARE @Function NVARCHAR(MAX);
    DECLARE @SQL NVARCHAR(MAX);

	SET @Cursor = CURSOR FOR
    SELECT PropId, PropName, PropValue, PropIndex FROM @Properties;

    OPEN @Cursor;

    FETCH NEXT FROM @Cursor INTO @PropId, @PropName, @PropValue, @PropIndex;

	WHILE @@FETCH_STATUS = 0
	BEGIN 
	SELECT @Function = [PropertyFunc] FROM [dbo].[t_ComplexFileTypeProperties] 
	WHERE [ComplexFileTypeId] = @P__FileId AND [Section] = @P__Section AND [PropertyName] = @PropName;
	IF @Function IS NOT NULL AND @Function <> ''
	BEGIN 
	-- Construct the dynamic SQL query to call the function
    SET @SQL = N'SELECT @PropertyValue = dbo.' + QUOTENAME(@Function) + '(' + QUOTENAME(@PropValue, '''') + ')';

    -- Execute the dynamic SQL
    DECLARE @PropertProcessedValue NVARCHAR(MAX);
	EXEC sp_executesql @SQL, N'@PropertyValue NVARCHAR(MAX) OUTPUT', @PropertProcessedValue OUTPUT;

	--UPDATE THE @Properties TABLE WITH THE NEW VALUE
	UPDATE @Properties SET PropValue = @PropertProcessedValue WHERE PropName = @PropName AND PropId = @PropId
	END

    FETCH NEXT FROM @Cursor INTO @PropId, @PropName, @PropValue, @PropIndex;
	END

	--Process the result @Properties which contains the processed value and the index
	DECLARE @Template NVARCHAR(MAX)
	SELECT @Template = [dbo].[udf_GetTemplate](@P__Section, @P__FileId)

	DECLARE @Result TABLE (
	   Line NVARCHAR(MAX)
	)

	DECLARE @CurrentPropertyIndex INT = 1;

	SET @Cursor = CURSOR FOR
    SELECT PropId, PropName, PropValue, PropIndex FROM @Properties;

    OPEN @Cursor;

    FETCH NEXT FROM @Cursor INTO @PropId, @PropName, @PropValue, @PropIndex;

	WHILE @@FETCH_STATUS = 0
	BEGIN 

	SET @Template = REPLACE(@Template, @PropIndex, @PropValue);

	SET @CurrentPropertyIndex = @CurrentPropertyIndex + 1;

	IF @CurrentPropertyIndex > @P__NumberOfProperties
    BEGIN
        -- Insert the processed template into the result table
        INSERT INTO @Result (Line) VALUES (@Template);

        -- Reset the template and current property index for the next object
		SELECT @Template = [dbo].[udf_GetTemplate](@P__Section, @P__FileId)
        SET @CurrentPropertyIndex = 1;
    END

    FETCH NEXT FROM @Cursor INTO @PropId, @PropName, @PropValue, @PropIndex;
	END

	CLOSE @Cursor;
    DEALLOCATE @Cursor;

    --Return the results
    SELECT Line FROM @Result
END

GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateAccountNumbers]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Pierre Abou Serhal
-- Create date: 2024/12/24
-- Description:	validate if passed comma separated strings are valid account numbers (IBAN, ICBS, T24, ...)
-- =============================================
CREATE PROCEDURE [dbo].[usp_ValidateAccountNumbers]
( -- Params
	@AccountNumbers NVARCHAR(MAX)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorMsg NVARCHAR(50) = '';

	-- Create a temporary table to store the validation results
	CREATE TABLE #AccountNumberValidation
	(
		AccountNumberStr NVARCHAR(50),
		IsValid INT
	);

	-- Insert data into the temporary table using STRING_SPLIT and validation logic
	INSERT INTO #AccountNumberValidation (AccountNumberStr, IsValid)
	SELECT 
		VALUE AS AccountNumberStr,
		CASE 
			WHEN VALUE = '' OR VALUE IS NULL THEN 0  -- Empty or NULL is invalid
			-- Check if each value contains only numbers and/or letters (A-Z, a-z, 0-9)
			WHEN PATINDEX('%[^0-9A-Za-z]%', VALUE) = 0 THEN 1  -- No invalid characters
			ELSE 0  -- Contains invalid characters
		END AS IsValid
	FROM STRING_SPLIT(@AccountNumbers, ',');

	-- Check for invalid values in the temporary table
	IF EXISTS (SELECT 1 FROM #AccountNumberValidation WHERE IsValid = 0)
	BEGIN
		SET @ErrorMsg = 'Account Numbers Are Invalid';
	END

	-- Return the error message (if any)
	SELECT @ErrorMsg AS ErrorMsg;

	-- Drop the temporary table after use
	DROP TABLE #AccountNumberValidation;

END


GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateLbpSaldomAmounts]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pierre Abou Serhal
-- Create date: 2025/02/05
-- Description:	validate if passed comma separated strings are valid numbers
-- =============================================
CREATE PROCEDURE [dbo].[usp_ValidateLbpSaldomAmounts]
( -- Params
	@Numbers NVARCHAR(MAX)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorMsg NVARCHAR(250) = '';
    DECLARE @MAX_INVALID_AMOUNT_VALUES INT = 0;
    DECLARE @InvalidAmountValuesCnt INT = 0;

    SELECT @MAX_INVALID_AMOUNT_VALUES = Value
    FROM t_Config WHERE ApplicationOwner = 'SalDom' AND Code = 'MAX_INVALID_AMOUNT_VALUES'

	-- Create a temporary table to store the validation results
	CREATE TABLE #NumberValidation
	(
		NumberStr NVARCHAR(50),
		IsValid INT
	);

	-- Insert data into the temporary table using STRING_SPLIT and validation logic
    -- Checking if there are numbers having decimal places
	INSERT INTO #NumberValidation (NumberStr, IsValid)
	SELECT 
		value AS NumberStr,
		CASE 
			WHEN  TRY_CAST(Value AS DECIMAL(18,4)) IS NOT NULL AND ABS(TRY_CAST(Value AS DECIMAL(18,4)) - TRY_CAST(Value AS DECIMAL(18,0))) > 0 THEN 0
			ELSE 1
		END AS IsValid
	FROM STRING_SPLIT(@Numbers, ',');

    SELECT @InvalidAmountValuesCnt = COUNT(*)
    FROM #NumberValidation WHERE IsValid = 0

	-- Check for invalid values in the temporary table
	IF @InvalidAmountValuesCnt > @MAX_INVALID_AMOUNT_VALUES
	BEGIN
		SET @ErrorMsg = 'Numbers Are Invalid, Found: ' + CAST(@InvalidAmountValuesCnt AS NVARCHAR) + ' amounts that have decimal places. Max allowed is: ' + CAST(@MAX_INVALID_AMOUNT_VALUES AS NVARCHAR);
	END

	-- Return the error message (if any)
	SELECT @ErrorMsg AS ErrorMsg;

	-- Drop the temporary table after use
	DROP TABLE #NumberValidation;

END

GO
/****** Object:  StoredProcedure [dbo].[usp_ValidatePositiveNumbers]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pierre Abou Serhal
-- Create date: 2024/12/24
-- Description:	validate if passed comma separated strings are valid numbers
-- =============================================
CREATE PROCEDURE [dbo].[usp_ValidatePositiveNumbers]
( -- Params
	@Numbers NVARCHAR(MAX)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorMsg NVARCHAR(50) = '';

	-- Create a temporary table to store the validation results
	CREATE TABLE #NumberValidation
	(
		NumberStr NVARCHAR(50),
		IsValid INT
	);

	-- Insert data into the temporary table using STRING_SPLIT and validation logic
	INSERT INTO #NumberValidation (NumberStr, IsValid)
	SELECT 
		value AS NumberStr,
		CASE 
			WHEN TRY_CAST(value AS FLOAT) IS NOT NULL AND TRY_CAST(value AS FLOAT) > 0 THEN 1
			ELSE 0
		END AS IsValid
	FROM STRING_SPLIT(@Numbers, ',');

	-- Check for invalid values in the temporary table
	IF EXISTS (SELECT 1 FROM #NumberValidation WHERE IsValid = 0)
	BEGIN
		SET @ErrorMsg = 'Numbers Are Invalid';
	END

	-- Return the error message (if any)
	SELECT @ErrorMsg AS ErrorMsg;

	-- Drop the temporary table after use
	DROP TABLE #NumberValidation;

END

GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateUsdSaldomAmounts]    Script Date: 2/13/2025 5:05:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pierre Abou Serhal
-- Create date: 2025/02/05
-- Description:	validate if passed comma separated strings are valid numbers
-- =============================================
CREATE PROCEDURE [dbo].[usp_ValidateUsdSaldomAmounts]
( -- Params
	@Numbers NVARCHAR(MAX)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorMsg NVARCHAR(250) = '';
    DECLARE @MAX_INVALID_AMOUNT_VALUES INT = 0;
    DECLARE @InvalidAmountValuesCnt INT = 0;

    SELECT @MAX_INVALID_AMOUNT_VALUES = Value
    FROM t_Config WHERE ApplicationOwner = 'SalDom' AND Code = 'MAX_INVALID_AMOUNT_VALUES'

	-- Create a temporary table to store the validation results
	CREATE TABLE #NumberValidation
	(
		NumberStr NVARCHAR(50),
		IsValid INT
	);

	-- Insert data into the temporary table using STRING_SPLIT and validation logic
    -- Checking if there are numbers having more then two decimal places
	INSERT INTO #NumberValidation (NumberStr, IsValid)
	SELECT 
		value AS NumberStr,
		CASE 
			WHEN  TRY_CAST(Value AS DECIMAL(18,4)) IS NOT NULL AND ABS(TRY_CAST(Value AS DECIMAL(18,4)) - TRY_CAST(Value AS DECIMAL(18,2))) > 0 THEN 0
			ELSE 1
		END AS IsValid
	FROM STRING_SPLIT(@Numbers, ',');

    SELECT @InvalidAmountValuesCnt = COUNT(*)
    FROM #NumberValidation WHERE IsValid = 0

	-- Check for invalid values in the temporary table
	IF @InvalidAmountValuesCnt > @MAX_INVALID_AMOUNT_VALUES
	BEGIN
		SET @ErrorMsg = 'Numbers Are Invalid, Found: ' + CAST(@InvalidAmountValuesCnt AS NVARCHAR) + ' amounts that have more then two decimal places. Max allowed is: ' + CAST(@MAX_INVALID_AMOUNT_VALUES AS NVARCHAR);
	END

	-- Return the error message (if any)
	SELECT @ErrorMsg AS ErrorMsg;

	-- Drop the temporary table after use
	DROP TABLE #NumberValidation;

END

GO
