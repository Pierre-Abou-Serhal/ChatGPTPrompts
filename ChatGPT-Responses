using System;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using ExcelDataReader;

class Program
{
    static void Main()
    {
        // ✅ Fix for encoding issues
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

        string filePath = "C:\\path\\to\\your\\file.xlsx";

        using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read))
        {
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                // ✅ Read everything into memory in one go
                var result = reader.AsDataSet(new ExcelDataSetConfiguration
                {
                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration
                    {
                        UseHeaderRow = false // Read raw data
                    }
                });

                // ✅ Get the first sheet
                DataTable table = result.Tables[0];

                // ✅ Detect header row dynamically
                int headerRowIndex = FindHeaderRow(table, "Name", "Age", "Grade");

                if (headerRowIndex == -1)
                {
                    Console.WriteLine("Headers not found!");
                    return;
                }

                // ✅ Extract header names
                DataRow headerRow = table.Rows[headerRowIndex];
                var columnNames = headerRow.ItemArray.Select(cell => cell.ToString().Trim()).ToArray();

                // ✅ Remove rows before the detected header row
                for (int i = headerRowIndex; i >= 0; i--)
                {
                    table.Rows.RemoveAt(0);
                }

                // ✅ Assign new column names
                for (int i = 0; i < columnNames.Length; i++)
                {
                    table.Columns[i].ColumnName = columnNames[i];
                }

                // ✅ Process data using column names
                foreach (DataRow row in table.Rows)
                {
                    string name = row["Name"].ToString();
                    int age = Convert.ToInt32(row["Age"]);
                    double grade = Convert.ToDouble(row["Grade"]);

                    Console.WriteLine($"Name: {name}, Age: {age}, Grade: {grade}");
                }
            }
        }
    }

    // ✅ Detects the header row dynamically
    static int FindHeaderRow(DataTable table, params string[] expectedHeaders)
    {
        for (int i = 0; i < table.Rows.Count; i++)
        {
            var rowValues = table.Rows[i].ItemArray.Select(cell => cell.ToString().Trim()).ToList();

            // ✅ If row contains all expected headers, return the row index
            if (expectedHeaders.All(header => rowValues.Contains(header)))
            {
                return i;
            }
        }
        return -1; // No valid header found
    }
}
